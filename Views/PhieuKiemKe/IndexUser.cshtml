@model IEnumerable<KhoHang_XNK.Models.PhieuKiemKe>

@{
	ViewData["Title"] = "Danh Sách Phiếu Kiểm Kê";
}

<!--Sidebar-->
<div class="sidebar transition overlay-scrollbars animate__animated  animate__slideInLeft">
	<div class="sidebar-content">
		<div id="sidebar">

			<!-- Logo -->
			<div class="logo">
				@if (User.IsInRole("Admin"))
				{
					<a asp-controller="TongQuan" asp-action="Index" style="text-decoration: none; color: inherit;">
						<h2 class="mb-0"><img src="~/images/logo/logo_sidebar.png"> WareTrack</h2>
					</a>
				}
				else if (User.IsInRole("User"))
				{
					<a asp-controller="TongQuan" asp-action="IndexUser" style="text-decoration: none; color: inherit;">
						<h2 class="mb-0"><img src="~/images/logo/logo_sidebar.png"> WareTrack</h2>
					</a>
				}
			</div>

			<ul class="side-menu">

				<!-- Tổng Quan -->
				<li>
					@if (User.IsInRole("Admin"))
					{
						<a asp-controller="TongQuan" asp-action="Index">
							<i class="bx bxs-dashboard icon"></i> Tổng Quan
						</a>
					}
					else if (User.IsInRole("User"))
					{
						<a asp-controller="TongQuan" asp-action="IndexUser">
							<i class="bx bxs-dashboard icon"></i> Tổng Quan
						</a>
					}
				</li>
				<!-- Divider-->
				<li class="divider" data-text="STARTER">Quản lý Kho Hàng</li>

				<!-- Kho Hàng -->
				<li>
					@if (User.IsInRole("Admin"))
					{
						<a asp-controller="KhoHang" asp-action="Index" >
							<i class='bx bxs-package icon'></i> Kho Hàng
						</a>
					}
					else if (User.IsInRole("User"))
					{
						<a asp-controller="KhoHang" asp-action="IndexUser" >
							<i class='bx bxs-package icon'></i> Kho Hàng
						</a>
					}
				</li>
				<!-- Divider-->
				<li class="divider" data-text="STARTER">Quản lý Hàng hóa</li>

				<!-- Hàng Hóa -->
				<li>
					@if (User.IsInRole("Admin"))
					{
						<a asp-controller="HangHoa" asp-action="Index" >
							<i class='bx bx-columns icon'></i> Hàng Hóa
						</a>
					}
					else if (User.IsInRole("User"))
					{
						<a asp-controller="HangHoa" asp-action="IndexUser" >
							<i class='bx bx-columns icon'></i> Hàng Hóa
						</a>
					}
				</li>

				<!-- Loại Hàng Hóa -->
				<li>
					@if (User.IsInRole("Admin"))
					{
						<a asp-controller="LoaiHangHoa" asp-action="Index">
							<i class='bx bxs-meh-blank icon'></i> Loại Hàng Hóa
						</a>
					}
					else if (User.IsInRole("User"))
					{
						<a asp-controller="LoaiHangHoa" asp-action="IndexUser">
							<i class='bx bxs-meh-blank icon'></i> Loại Hàng Hóa
						</a>
					}
				</li>

				<!-- Tồn Kho -->
				<li>
					@if (User.IsInRole("Admin"))
					{
						<a asp-controller="TonKho" asp-action="Index">
							<i class='fa fa-th icon'></i> Tồn Kho
						</a>
					}
					else if (User.IsInRole("User"))
					{
						<a asp-controller="TonKho" asp-action="IndexUser">
							<i class='fa fa-th icon'></i> Tồn Kho
						</a>
					}
				</li>

				<!-- Divider-->
				<li class="divider" data-text="Atrana">Quản lý Nhân sự và Khách hàng</li>

				<!-- Nhân Viên -->
				<li>
					@if (User.IsInRole("Admin"))
					{
						<a asp-controller="NhanVien" asp-action="Index">
							<i class='bx bxs-user icon'></i> Nhân Viên
						</a>
					}
					else if (User.IsInRole("User"))
					{
						<a asp-controller="NhanVien" asp-action="IndexUser" >
							<i class='bx bxs-user icon'></i> Nhân Viên
						</a>
					}
				</li>

				<!-- Khách Hàng -->
				<li>
					@if (User.IsInRole("Admin"))
					{
						<a asp-controller="KhachHang" asp-action="Index">
							<i class='bx bxs-notepad icon'></i> Khách Hàng
						</a>
					}
					else if (User.IsInRole("User"))
					{
						<a asp-controller="KhachHang" asp-action="IndexUser">
							<i class='bx bxs-notepad icon'></i> Khách Hàng
						</a>
					}
				</li>

				<!-- Loại Khách Hàng -->
				<li>
					@if (User.IsInRole("Admin"))
					{
						<a asp-controller="LoaiKhachHang" asp-action="Index" >
							<i class='bx bxs-widget icon'></i> Loại Khách Hàng
						</a>
					}
					else if (User.IsInRole("User"))
					{
						<a asp-controller="LoaiKhachHang" asp-action="IndexUser" >
							<i class='bx bxs-widget icon'></i> Loại Khách Hàng
						</a>
					}
				</li>

				<!-- Divider-->
				<li class="divider" data-text="Pages">Quản lý Nhà cung cấp</li>

				<!-- Nhà Cung Cấp -->
				<li>
					@if (User.IsInRole("Admin"))
					{
						<a asp-controller="NhaCungCap" asp-action="Index" >
							<i class='fa fa-pencil-ruler icon'></i> Nhà Cung Cấp
						</a>
					}
					else if (User.IsInRole("User"))
					{
						<a asp-controller="NhaCungCap" asp-action="IndexUser" >
							<i class='fa fa-pencil-ruler icon'></i> Nhà Cung Cấp
						</a>
					}
				</li>

				<!-- Divider-->
				<li class="divider" data-text="Pages">Quản lý Nhà cung cấp</li>

				<!-- Đơn Nhập Hàng -->
				<li>
					@if (User.IsInRole("Admin"))
					{
						<a asp-controller="DonNhapHang" asp-action="Index">
							<i class='bx bxs-notepad icon'></i> Đơn Nhập Hàng
						</a>
					}
					else if (User.IsInRole("User"))
					{
						<a asp-controller="DonNhapHang" asp-action="IndexUser">
							<i class='bx bxs-notepad icon'></i> Đơn Nhập Hàng
						</a>
					}
				</li>

				<!-- Đơn Xuất Hàng -->
				<li>
					@if (User.IsInRole("Admin"))
					{
						<a asp-controller="DonXuatHang" asp-action="Index">
							<i class='bx bxs-notepad icon'></i> Đơn Xuất Hàng
						</a>
					}
					else if (User.IsInRole("User"))
					{
						<a asp-controller="DonXuatHang" asp-action="IndexUser">
							<i class='bx bxs-notepad icon'></i> Đơn Xuất Hàng
						</a>
					}
				</li>

				<!-- Phiếu Kiểm Kê -->
				<li>
					@if (User.IsInRole("Admin"))
					{
						<a asp-controller="PhieuKiemKe" asp-action="Index" class="active">
							<i class='bx bxs-notepad icon'></i> Phiếu Kiểm Kê
						</a>
					}
					else if (User.IsInRole("User"))
					{
						<a asp-controller="PhieuKiemKe" asp-action="IndexUser" class="active">
							<i class='bx bxs-notepad icon'></i> Phiếu Kiểm Kê
						</a>
					}
				</li>

				<!-- Thống Kê -->
				<li>
					@if (User.IsInRole("Admin"))
					{
						<a asp-controller="ThongKe" asp-action="Index">
							<i class="bx bxs-bar-chart-alt-2 icon"></i> Thống Kê Doanh Thu
						</a>
					}
					else if (User.IsInRole("User"))
					{
						<a asp-controller="ThongKe" asp-action="IndexUser">
							<i class="bx bxs-bar-chart-alt-2 icon"></i> Thống Kê Doanh Thu
						</a>
					}
				</li>

			</ul>
		</div>
	</div>
</div>
<!-- End Sidebar-->



<div class="sidebar-overlay"></div>

<!--Content Start-->
<div class="content-start transition">
    <div class="container-fluid dashboard">
        <div class="content-header">
            <h1>Danh Sách Phiếu Kiểm Kê</h1>
            <p></p>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <a asp-action="Create" class="btn btn-primary"><i class="fas fa-plus"></i> Thêm phiếu kiểm kê mới</a>
                            <input type="text" id="searchInput" class="form-control w-25" placeholder="Tìm kiếm...">
                            <div class="d-flex gap-2">
                                <button onclick="location.href='/CTPhieuKiemKe/Index'"
                                        class="btn btn-secondary rounded-pill btn-match">
                                    <i class="fas fa-list"></i> CT Phiếu kiểm kê
                                </button>

                                <button id="exportExcelBtn"
                                        class="btn btn-success rounded-pill btn-match">
                                    <i class="fas fa-file-export"></i> Xuất Excel
                                </button>
                            </div>
                        </div>

                        <!-- Bộ lọc thời gian -->
                        <div class="filter-section bg-light rounded p-3 mb-3">
                            <h5 class="mb-3"><i class="fas fa-filter"></i> Lọc theo thời gian</h5>
                            <!-- Lọc theo khoảng thời gian -->
                            <div class="row align-items-end g-3">
                                <div class="col-md-2">
                                    <label for="quickFilter" class="form-label">Lọc nhanh:</label>
                                    <select id="quickFilter" class="form-select">
                                        <option value="all" selected>Tất cả</option>
                                        <option value="today">Hôm nay</option>
                                        <option value="yesterday">Hôm qua</option>
                                        <option value="this-week">Tuần này</option>
                                        <option value="last-week">Tuần trước</option>
                                        <option value="this-month">Tháng này</option>
                                        <option value="last-month">Tháng trước</option>
                                    </select>
                                </div>
                                <div class="col-md-2">
                                    <label for="fromDate" class="form-label">Từ ngày:</label>
                                    <input type="date" id="fromDate" class="form-control">
                                </div>
                                <div class="col-md-2">
                                    <label for="toDate" class="form-label">Đến ngày:</label>
                                    <input type="date" id="toDate" class="form-control">
                                </div>
                                <div class="col-md-4 d-flex justify-content-start align-items-end gap-2">
                                    <button type="button" id="applyCustomFilter" class="btn btn-success">
                                        <i class="fas fa-search"></i> Lọc
                                    </button>
                                    <button type="button" id="clearFilter" class="btn btn-secondary">
                                        <i class="fas fa-times"></i> Xóa lọc
                                    </button>
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="card-body">

                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">Mã phiếu kiểm kê</th>
                                        <th scope="col">Tên kho hàng</th>
                                        <th scope="col">Tên nhân viên</th>
                                        <th scope="col">Ngày kiểm kê</th>
                                        <th scope="col" style="text-align: center;">Hành động</th>
                                    </tr>
                                </thead>
                                <tbody id="orderTableBody">
                                    @foreach (var item in Model)
                                    {
                                        <tr class="data-row"
                                            data-makiemke="@item.MaKiemKe"
                                            data-tenkho="@(item.KhoHang?.TenKho ?? "")"
                                            data-tennv="@(item.NhanVien?.HoTen ?? "")"
                                            data-ngaykiemke="@item.NgayKiemKe.ToString("dd/MM/yyyy")"
                                            data-date="@item.NgayKiemKe.ToString("yyyy-MM-dd")">
                                            <th scope="row">@Html.DisplayFor(modelItem => item.MaKiemKe)</th>
                                            <td>@Html.DisplayFor(modelItem => item.KhoHang.TenKho)</td>
                                            <td>@Html.DisplayFor(modelItem => item.NhanVien.HoTen)</td>
                                            <td>@item.NgayKiemKe.ToString("dd/MM/yyyy")</td>
                                            <td style="text-align: center;">
                                                <a asp-action="Edit" asp-route-id="@item.MaKiemKe" class="btn btn-light rounded-pill"><i class="fas fa-edit"></i></a>
                                                <a asp-action="Details" asp-route-id="@item.MaKiemKe" class="btn btn-light rounded-pill"><i class="fas fa-eye"></i></a>
                                                <a asp-action="Delete" asp-route-id="@item.MaKiemKe" class="btn btn-light rounded-pill" onclick="return confirm('Bạn có chắc chắn muốn xóa phiếu kiểm kê này không?');"><i class="fas fa-trash"></i></a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <div id="noResults" class="text-center py-5 d-none">
                                <i class="fas fa-search fa-3x text-muted mb-3"></i>
                                <h5 class="text-muted">Không tìm thấy phiếu kiểm kê nào</h5>
                                <p class="text-muted">Hãy thử với từ khóa khác</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Anti-Forgery Token -->
<form id="antiForgeryForm" style="display:none;">
    @Html.AntiForgeryToken()
</form>
<style>
    .btn-match {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0.5rem 1.25rem;
        font-size: 1rem;
        line-height: 1.25;
        border: none;
        text-decoration: none;
    }

        .btn-match i {
            font-size: 1rem;
            margin-right: 0.5rem;
        }
</style>
<!-- JavaScript -->
@section Scripts {
    <script src="~/js/common-excel.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            initializeList({
                searchInputId: 'searchInput',
                exportBtnId: 'exportExcelBtn',
                clearSearchBtnId: 'clearFilter',
                noResultsId: 'noResults',
                tableBodyId: 'orderTableBody',
                rowSelector: '.data-row',
                searchFields: ['makiemke', 'tenkho', 'tennv', 'ngaykiemke'],
                exportUrl: '@Url.Action("ExportExcel", "PhieuKiemKe")',
                fromDateId: 'fromDate',
                toDateId: 'toDate'
            });

            const quickFilter = document.getElementById('quickFilter');
            const fromDateInput = document.getElementById('fromDate');
            const toDateInput = document.getElementById('toDate');
            const applyCustomFilterBtn = document.getElementById('applyCustomFilter');
            const clearFilterBtn = document.getElementById('clearFilter');
            const tableBody = document.getElementById('orderTableBody');
            const allRows = document.querySelectorAll('.data-row');

            function filterByDate(fromDate, toDate) {
                let visibleCount = 0;
                allRows.forEach(row => {
                    const rowDate = new Date(row.dataset.date);
                    const from = fromDate ? new Date(fromDate) : null;
                    const to = toDate ? new Date(toDate) : null;

                    const shouldShow = (!from || rowDate >= from) && (!to || rowDate <= to);
                    if (shouldShow) {
                        row.style.display = '';
                        visibleCount++;
                    } else {
                        row.style.display = 'none';
                    }
                });

                const noResults = document.getElementById('noResults');
                if (visibleCount === 0) {
                    noResults.classList.remove('d-none');
                    tableBody.style.display = 'none';
                } else {
                    noResults.classList.add('d-none');
                    tableBody.style.display = '';
                }
            }

            quickFilter.addEventListener('change', function () {
                const value = this.value;
                const today = new Date();
                let fromDate, toDate;

                switch (value) {
                    case 'all':
                        fromDate = toDate = null;
                        break;
                    case 'today':
                        fromDate = toDate = today.toISOString().split('T')[0];
                        break;
                    case 'yesterday':
                        today.setDate(today.getDate() - 1);
                        fromDate = toDate = today.toISOString().split('T')[0];
                        break;
                    case 'this-week':
                        const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay()));
                        fromDate = firstDayOfWeek.toISOString().split('T')[0];
                        toDate = new Date().toISOString().split('T')[0];
                        break;
                    case 'last-week':
                        const lastWeekStart = new Date(today.setDate(today.getDate() - today.getDay() - 7));
                        const lastWeekEnd = new Date(today.setDate(today.getDate() + 6));
                        fromDate = lastWeekStart.toISOString().split('T')[0];
                        toDate = lastWeekEnd.toISOString().split('T')[0];
                        break;
                    case 'this-month':
                        fromDate = new Date(today.getFullYear(), today.getMonth(), 1).toISOString().split('T')[0];
                        toDate = new Date(today.getFullYear(), today.getMonth() + 1, 0).toISOString().split('T')[0];
                        break;
                    case 'last-month':
                        fromDate = new Date(today.getFullYear(), today.getMonth() - 1, 1).toISOString().split('T')[0];
                        toDate = new Date(today.getFullYear(), today.getMonth(), 0).toISOString().split('T')[0];
                        break;
                }

                // Cập nhật giá trị input
                fromDateInput.value = fromDate || '';
                toDateInput.value = toDate || '';
                filterByDate(fromDate, toDate);
            });

            applyCustomFilterBtn.addEventListener('click', function () {
                const fromDate = fromDateInput.value;
                const toDate = toDateInput.value;
                if (!fromDate && !toDate) {
                    alert('Vui lòng chọn ít nhất một ngày để lọc!');
                    return;
                }
                quickFilter.value = 'all'; // Reset quick filter
                filterByDate(fromDate, toDate);
            });

            clearFilterBtn.addEventListener('click', function () {
                fromDateInput.value = '';
                toDateInput.value = '';
                quickFilter.value = 'all';
                filterByDate(null, null);
            });
        });
    </script>
}
<script src="~/js/common-list.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        initializeList({
            searchInputId: 'searchInput',
            exportBtnId: 'exportExcelBtn',
            clearSearchBtnId: 'clearFilter',
            noResultsId: 'noResults',
            tableBodyId: 'orderTableBody',
            rowSelector: '.data-row',
            searchFields: ['makiemke', 'tenkho', 'tennv', 'ngaykiemke'],
            exportUrl: '@Url.Action("ExportExcel", "PhieuKiemKe")',
            fromDateId: 'fromDate',
            toDateId: 'toDate'
        });

        const quickFilter = document.getElementById('quickFilter');
        const fromDateInput = document.getElementById('fromDate');
        const toDateInput = document.getElementById('toDate');
        const applyCustomFilterBtn = document.getElementById('applyCustomFilter');
        const clearFilterBtn = document.getElementById('clearFilter');
        const tableBody = document.getElementById('orderTableBody');
        const allRows = document.querySelectorAll('.data-row');

        function filterByDate(fromDate, toDate) {
            let visibleCount = 0;
            allRows.forEach(row => {
                const rowDate = new Date(row.dataset.date);
                const from = fromDate ? new Date(fromDate) : null;
                const to = toDate ? new Date(toDate) : null;

                const shouldShow = (!from || rowDate >= from) && (!to || rowDate <= to);
                if (shouldShow) {
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.style.display = 'none';
                }
            });

            const noResults = document.getElementById('noResults');
            if (visibleCount === 0) {
                noResults.classList.remove('d-none');
                tableBody.style.display = 'none';
            } else {
                noResults.classList.add('d-none');
                tableBody.style.display = '';
            }
        }

        quickFilter.addEventListener('change', function () {
            const value = this.value;
            const today = new Date();
            let fromDate, toDate;

            switch (value) {
                case 'all':
                    fromDate = toDate = null;
                    break;
                case 'today':
                    fromDate = toDate = today.toISOString().split('T')[0];
                    break;
                case 'yesterday':
                    today.setDate(today.getDate() - 1);
                    fromDate = toDate = today.toISOString().split('T')[0];
                    break;
                case 'this-week':
                    const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay()));
                    fromDate = firstDayOfWeek.toISOString().split('T')[0];
                    toDate = new Date().toISOString().split('T')[0];
                    break;
                case 'last-week':
                    const lastWeekStart = new Date(today.setDate(today.getDate() - today.getDay() - 7));
                    const lastWeekEnd = new Date(today.setDate(today.getDate() + 6));
                    fromDate = lastWeekStart.toISOString().split('T')[0];
                    toDate = lastWeekEnd.toISOString().split('T')[0];
                    break;
                case 'this-month':
                    fromDate = new Date(today.getFullYear(), today.getMonth(), 1).toISOString().split('T')[0];
                    toDate = new Date(today.getFullYear(), today.getMonth() + 1, 0).toISOString().split('T')[0];
                    break;
                case 'last-month':
                    fromDate = new Date(today.getFullYear(), today.getMonth() - 1, 1).toISOString().split('T')[0];
                    toDate = new Date(today.getFullYear(), today.getMonth(), 0).toISOString().split('T')[0];
                    break;
            }

            // Cập nhật giá trị input
            fromDateInput.value = fromDate || '';
            toDateInput.value = toDate || '';
            filterByDate(fromDate, toDate);
        });

        applyCustomFilterBtn.addEventListener('click', function () {
            const fromDate = fromDateInput.value;
            const toDate = toDateInput.value;
            if (!fromDate && !toDate) {
                alert('Vui lòng chọn ít nhất một ngày để lọc!');
                return;
            }
            quickFilter.value = 'all'; // Reset quick filter
            filterByDate(fromDate, toDate);
        });

        clearFilterBtn.addEventListener('click', function () {
            fromDateInput.value = '';
            toDateInput.value = '';
            quickFilter.value = 'all';
            filterByDate(null, null);
        });
    });
</script>
}